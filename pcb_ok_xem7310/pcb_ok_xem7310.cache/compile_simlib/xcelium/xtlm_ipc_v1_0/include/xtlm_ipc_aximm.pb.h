// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/xtlm_ipc_aximm.proto

#ifndef PROTOBUF_INCLUDED_proto_2fxtlm_5fipc_5faximm_2eproto
#define PROTOBUF_INCLUDED_proto_2fxtlm_5fipc_5faximm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fxtlm_5fipc_5faximm_2eproto

#ifdef CADENCE
#define X_GOOGLE_NAMESPACE google37
#else
#define X_GOOGLE_NAMESPACE google
#endif

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fxtlm_5fipc_5faximm_2eproto {
  static const ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::X_GOOGLE_NAMESPACE::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::X_GOOGLE_NAMESPACE::protobuf::internal::FieldMetadata field_metadata[];
  static const ::X_GOOGLE_NAMESPACE::protobuf::internal::SerializationTable serialization_table[];
  static const ::X_GOOGLE_NAMESPACE::protobuf::uint32 offsets[];
};
void AddDescriptors_proto_2fxtlm_5fipc_5faximm_2eproto();
namespace xtlm_ipc {
class aximm_packet;
class aximm_packetDefaultTypeInternal;
extern aximm_packetDefaultTypeInternal _aximm_packet_default_instance_;
}  // namespace xtlm_ipc
namespace X_GOOGLE_NAMESPACE {
namespace protobuf {
template<> ::xtlm_ipc::aximm_packet* Arena::CreateMaybeMessage<::xtlm_ipc::aximm_packet>(Arena*);
}  // namespace protobuf
}  // namespace X_GOOGLE_NAMESPACE
namespace xtlm_ipc {

enum aximm_packet_burst_type {
  aximm_packet_burst_type_FIXED = 0,
  aximm_packet_burst_type_INCR = 1,
  aximm_packet_burst_type_WRAP = 2
};
bool aximm_packet_burst_type_IsValid(int value);
const aximm_packet_burst_type aximm_packet_burst_type_burst_type_MIN = aximm_packet_burst_type_FIXED;
const aximm_packet_burst_type aximm_packet_burst_type_burst_type_MAX = aximm_packet_burst_type_WRAP;
const int aximm_packet_burst_type_burst_type_ARRAYSIZE = aximm_packet_burst_type_burst_type_MAX + 1;

const ::X_GOOGLE_NAMESPACE::protobuf::EnumDescriptor* aximm_packet_burst_type_descriptor();
inline const ::std::string& aximm_packet_burst_type_Name(aximm_packet_burst_type value) {
  return ::X_GOOGLE_NAMESPACE::protobuf::internal::NameOfEnum(
    aximm_packet_burst_type_descriptor(), value);
}
inline bool aximm_packet_burst_type_Parse(
    const ::std::string& name, aximm_packet_burst_type* value) {
  return ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseNamedEnum<aximm_packet_burst_type>(
    aximm_packet_burst_type_descriptor(), name, value);
}
enum aximm_packet_command {
  aximm_packet_command_READ = 0,
  aximm_packet_command_WRITE = 1
};
bool aximm_packet_command_IsValid(int value);
const aximm_packet_command aximm_packet_command_command_MIN = aximm_packet_command_READ;
const aximm_packet_command aximm_packet_command_command_MAX = aximm_packet_command_WRITE;
const int aximm_packet_command_command_ARRAYSIZE = aximm_packet_command_command_MAX + 1;

const ::X_GOOGLE_NAMESPACE::protobuf::EnumDescriptor* aximm_packet_command_descriptor();
inline const ::std::string& aximm_packet_command_Name(aximm_packet_command value) {
  return ::X_GOOGLE_NAMESPACE::protobuf::internal::NameOfEnum(
    aximm_packet_command_descriptor(), value);
}
inline bool aximm_packet_command_Parse(
    const ::std::string& name, aximm_packet_command* value) {
  return ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseNamedEnum<aximm_packet_command>(
    aximm_packet_command_descriptor(), name, value);
}
// ===================================================================

class aximm_packet :
    public ::X_GOOGLE_NAMESPACE::protobuf::Message /* @@protoc_insertion_point(class_definition:xtlm_ipc.aximm_packet) */ {
 public:
  aximm_packet();
  virtual ~aximm_packet();

  aximm_packet(const aximm_packet& from);

  inline aximm_packet& operator=(const aximm_packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  aximm_packet(aximm_packet&& from) noexcept
    : aximm_packet() {
    *this = ::std::move(from);
  }

  inline aximm_packet& operator=(aximm_packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::X_GOOGLE_NAMESPACE::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::X_GOOGLE_NAMESPACE::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::X_GOOGLE_NAMESPACE::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const aximm_packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const aximm_packet* internal_default_instance() {
    return reinterpret_cast<const aximm_packet*>(
               &_aximm_packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(aximm_packet* other);
  friend void swap(aximm_packet& a, aximm_packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline aximm_packet* New() const final {
    return CreateMaybeMessage<aximm_packet>(nullptr);
  }

  aximm_packet* New(::X_GOOGLE_NAMESPACE::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<aximm_packet>(arena);
  }
  void CopyFrom(const ::X_GOOGLE_NAMESPACE::protobuf::Message& from) final;
  void MergeFrom(const ::X_GOOGLE_NAMESPACE::protobuf::Message& from) final;
  void CopyFrom(const aximm_packet& from);
  void MergeFrom(const aximm_packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseContext* ctx);
  ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::X_GOOGLE_NAMESPACE::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::X_GOOGLE_NAMESPACE::protobuf::io::CodedOutputStream* output) const final;
  ::X_GOOGLE_NAMESPACE::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::X_GOOGLE_NAMESPACE::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(aximm_packet* other);
  private:
  inline ::X_GOOGLE_NAMESPACE::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::X_GOOGLE_NAMESPACE::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef aximm_packet_burst_type burst_type;
  static const burst_type FIXED =
    aximm_packet_burst_type_FIXED;
  static const burst_type INCR =
    aximm_packet_burst_type_INCR;
  static const burst_type WRAP =
    aximm_packet_burst_type_WRAP;
  static inline bool burst_type_IsValid(int value) {
    return aximm_packet_burst_type_IsValid(value);
  }
  static const burst_type burst_type_MIN =
    aximm_packet_burst_type_burst_type_MIN;
  static const burst_type burst_type_MAX =
    aximm_packet_burst_type_burst_type_MAX;
  static const int burst_type_ARRAYSIZE =
    aximm_packet_burst_type_burst_type_ARRAYSIZE;
  static inline const ::X_GOOGLE_NAMESPACE::protobuf::EnumDescriptor*
  burst_type_descriptor() {
    return aximm_packet_burst_type_descriptor();
  }
  static inline const ::std::string& burst_type_Name(burst_type value) {
    return aximm_packet_burst_type_Name(value);
  }
  static inline bool burst_type_Parse(const ::std::string& name,
      burst_type* value) {
    return aximm_packet_burst_type_Parse(name, value);
  }

  typedef aximm_packet_command command;
  static const command READ =
    aximm_packet_command_READ;
  static const command WRITE =
    aximm_packet_command_WRITE;
  static inline bool command_IsValid(int value) {
    return aximm_packet_command_IsValid(value);
  }
  static const command command_MIN =
    aximm_packet_command_command_MIN;
  static const command command_MAX =
    aximm_packet_command_command_MAX;
  static const int command_ARRAYSIZE =
    aximm_packet_command_command_ARRAYSIZE;
  static inline const ::X_GOOGLE_NAMESPACE::protobuf::EnumDescriptor*
  command_descriptor() {
    return aximm_packet_command_descriptor();
  }
  static inline const ::std::string& command_Name(command value) {
    return aximm_packet_command_Name(value);
  }
  static inline bool command_Parse(const ::std::string& name,
      command* value) {
    return aximm_packet_command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes data = 6;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional bytes strb = 7;
  bool has_strb() const;
  void clear_strb();
  static const int kStrbFieldNumber = 7;
  const ::std::string& strb() const;
  void set_strb(const ::std::string& value);
  #if LANG_CXX11
  void set_strb(::std::string&& value);
  #endif
  void set_strb(const char* value);
  void set_strb(const void* value, size_t size);
  ::std::string* mutable_strb();
  ::std::string* release_strb();
  void set_allocated_strb(::std::string* strb);

  // required uint64 addr = 2;
  bool has_addr() const;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  ::X_GOOGLE_NAMESPACE::protobuf::uint64 addr() const;
  void set_addr(::X_GOOGLE_NAMESPACE::protobuf::uint64 value);

  // required .xtlm_ipc.aximm_packet.command cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::xtlm_ipc::aximm_packet_command cmd() const;
  void set_cmd(::xtlm_ipc::aximm_packet_command value);

  // optional uint32 len = 3;
  bool has_len() const;
  void clear_len();
  static const int kLenFieldNumber = 3;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 len() const;
  void set_len(::X_GOOGLE_NAMESPACE::protobuf::uint32 value);

  // optional uint32 size = 4;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 size() const;
  void set_size(::X_GOOGLE_NAMESPACE::protobuf::uint32 value);

  // optional int32 resp = 8;
  bool has_resp() const;
  void clear_resp();
  static const int kRespFieldNumber = 8;
  ::X_GOOGLE_NAMESPACE::protobuf::int32 resp() const;
  void set_resp(::X_GOOGLE_NAMESPACE::protobuf::int32 value);

  // optional uint32 id = 9;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 9;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 id() const;
  void set_id(::X_GOOGLE_NAMESPACE::protobuf::uint32 value);

  // optional uint32 lock = 10;
  bool has_lock() const;
  void clear_lock();
  static const int kLockFieldNumber = 10;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 lock() const;
  void set_lock(::X_GOOGLE_NAMESPACE::protobuf::uint32 value);

  // optional uint32 cache = 11;
  bool has_cache() const;
  void clear_cache();
  static const int kCacheFieldNumber = 11;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 cache() const;
  void set_cache(::X_GOOGLE_NAMESPACE::protobuf::uint32 value);

  // optional uint32 prot = 12;
  bool has_prot() const;
  void clear_prot();
  static const int kProtFieldNumber = 12;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 prot() const;
  void set_prot(::X_GOOGLE_NAMESPACE::protobuf::uint32 value);

  // optional float delay = 13;
  bool has_delay() const;
  void clear_delay();
  static const int kDelayFieldNumber = 13;
  float delay() const;
  void set_delay(float value);

  // optional uint32 qos = 16;
  bool has_qos() const;
  void clear_qos();
  static const int kQosFieldNumber = 16;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 qos() const;
  void set_qos(::X_GOOGLE_NAMESPACE::protobuf::uint32 value);

  // optional uint32 region = 17;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 17;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 region() const;
  void set_region(::X_GOOGLE_NAMESPACE::protobuf::uint32 value);

  // optional .xtlm_ipc.aximm_packet.burst_type burst = 5 [default = INCR];
  bool has_burst() const;
  void clear_burst();
  static const int kBurstFieldNumber = 5;
  ::xtlm_ipc::aximm_packet_burst_type burst() const;
  void set_burst(::xtlm_ipc::aximm_packet_burst_type value);

  // @@protoc_insertion_point(class_scope:xtlm_ipc.aximm_packet)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::X_GOOGLE_NAMESPACE::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::X_GOOGLE_NAMESPACE::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::X_GOOGLE_NAMESPACE::protobuf::internal::CachedSize _cached_size_;
  ::X_GOOGLE_NAMESPACE::protobuf::internal::ArenaStringPtr data_;
  ::X_GOOGLE_NAMESPACE::protobuf::internal::ArenaStringPtr strb_;
  ::X_GOOGLE_NAMESPACE::protobuf::uint64 addr_;
  int cmd_;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 len_;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 size_;
  ::X_GOOGLE_NAMESPACE::protobuf::int32 resp_;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 id_;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 lock_;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 cache_;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 prot_;
  float delay_;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 qos_;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 region_;
  int burst_;
  friend struct ::TableStruct_proto_2fxtlm_5fipc_5faximm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// aximm_packet

// required .xtlm_ipc.aximm_packet.command cmd = 1;
inline bool aximm_packet::has_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void aximm_packet::clear_cmd() {
  cmd_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::xtlm_ipc::aximm_packet_command aximm_packet::cmd() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.cmd)
  return static_cast< ::xtlm_ipc::aximm_packet_command >(cmd_);
}
inline void aximm_packet::set_cmd(::xtlm_ipc::aximm_packet_command value) {
  assert(::xtlm_ipc::aximm_packet_command_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  cmd_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.cmd)
}

// required uint64 addr = 2;
inline bool aximm_packet::has_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void aximm_packet::clear_addr() {
  addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::X_GOOGLE_NAMESPACE::protobuf::uint64 aximm_packet::addr() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.addr)
  return addr_;
}
inline void aximm_packet::set_addr(::X_GOOGLE_NAMESPACE::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  addr_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.addr)
}

// optional uint32 len = 3;
inline bool aximm_packet::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void aximm_packet::clear_len() {
  len_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::X_GOOGLE_NAMESPACE::protobuf::uint32 aximm_packet::len() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.len)
  return len_;
}
inline void aximm_packet::set_len(::X_GOOGLE_NAMESPACE::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  len_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.len)
}

// optional uint32 size = 4;
inline bool aximm_packet::has_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void aximm_packet::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::X_GOOGLE_NAMESPACE::protobuf::uint32 aximm_packet::size() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.size)
  return size_;
}
inline void aximm_packet::set_size(::X_GOOGLE_NAMESPACE::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  size_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.size)
}

// optional .xtlm_ipc.aximm_packet.burst_type burst = 5 [default = INCR];
inline bool aximm_packet::has_burst() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void aximm_packet::clear_burst() {
  burst_ = 1;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::xtlm_ipc::aximm_packet_burst_type aximm_packet::burst() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.burst)
  return static_cast< ::xtlm_ipc::aximm_packet_burst_type >(burst_);
}
inline void aximm_packet::set_burst(::xtlm_ipc::aximm_packet_burst_type value) {
  assert(::xtlm_ipc::aximm_packet_burst_type_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  burst_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.burst)
}

// optional bytes data = 6;
inline bool aximm_packet::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void aximm_packet::clear_data() {
  data_.ClearToEmptyNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& aximm_packet::data() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.data)
  return data_.GetNoArena();
}
inline void aximm_packet::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.data)
}
#if LANG_CXX11
inline void aximm_packet::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xtlm_ipc.aximm_packet.data)
}
#endif
inline void aximm_packet::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xtlm_ipc.aximm_packet.data)
}
inline void aximm_packet::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xtlm_ipc.aximm_packet.data)
}
inline ::std::string* aximm_packet::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:xtlm_ipc.aximm_packet.data)
  return data_.MutableNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* aximm_packet::release_data() {
  // @@protoc_insertion_point(field_release:xtlm_ipc.aximm_packet.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void aximm_packet::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:xtlm_ipc.aximm_packet.data)
}

// optional bytes strb = 7;
inline bool aximm_packet::has_strb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void aximm_packet::clear_strb() {
  strb_.ClearToEmptyNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& aximm_packet::strb() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.strb)
  return strb_.GetNoArena();
}
inline void aximm_packet::set_strb(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  strb_.SetNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.strb)
}
#if LANG_CXX11
inline void aximm_packet::set_strb(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  strb_.SetNoArena(
    &::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xtlm_ipc.aximm_packet.strb)
}
#endif
inline void aximm_packet::set_strb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  strb_.SetNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xtlm_ipc.aximm_packet.strb)
}
inline void aximm_packet::set_strb(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  strb_.SetNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xtlm_ipc.aximm_packet.strb)
}
inline ::std::string* aximm_packet::mutable_strb() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:xtlm_ipc.aximm_packet.strb)
  return strb_.MutableNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* aximm_packet::release_strb() {
  // @@protoc_insertion_point(field_release:xtlm_ipc.aximm_packet.strb)
  if (!has_strb()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return strb_.ReleaseNonDefaultNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void aximm_packet::set_allocated_strb(::std::string* strb) {
  if (strb != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  strb_.SetAllocatedNoArena(&::X_GOOGLE_NAMESPACE::protobuf::internal::GetEmptyStringAlreadyInited(), strb);
  // @@protoc_insertion_point(field_set_allocated:xtlm_ipc.aximm_packet.strb)
}

// optional int32 resp = 8;
inline bool aximm_packet::has_resp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void aximm_packet::clear_resp() {
  resp_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::X_GOOGLE_NAMESPACE::protobuf::int32 aximm_packet::resp() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.resp)
  return resp_;
}
inline void aximm_packet::set_resp(::X_GOOGLE_NAMESPACE::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  resp_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.resp)
}

// optional uint32 id = 9;
inline bool aximm_packet::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void aximm_packet::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::X_GOOGLE_NAMESPACE::protobuf::uint32 aximm_packet::id() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.id)
  return id_;
}
inline void aximm_packet::set_id(::X_GOOGLE_NAMESPACE::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  id_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.id)
}

// optional uint32 lock = 10;
inline bool aximm_packet::has_lock() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void aximm_packet::clear_lock() {
  lock_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::X_GOOGLE_NAMESPACE::protobuf::uint32 aximm_packet::lock() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.lock)
  return lock_;
}
inline void aximm_packet::set_lock(::X_GOOGLE_NAMESPACE::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  lock_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.lock)
}

// optional uint32 cache = 11;
inline bool aximm_packet::has_cache() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void aximm_packet::clear_cache() {
  cache_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::X_GOOGLE_NAMESPACE::protobuf::uint32 aximm_packet::cache() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.cache)
  return cache_;
}
inline void aximm_packet::set_cache(::X_GOOGLE_NAMESPACE::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  cache_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.cache)
}

// optional uint32 prot = 12;
inline bool aximm_packet::has_prot() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void aximm_packet::clear_prot() {
  prot_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::X_GOOGLE_NAMESPACE::protobuf::uint32 aximm_packet::prot() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.prot)
  return prot_;
}
inline void aximm_packet::set_prot(::X_GOOGLE_NAMESPACE::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  prot_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.prot)
}

// optional float delay = 13;
inline bool aximm_packet::has_delay() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void aximm_packet::clear_delay() {
  delay_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float aximm_packet::delay() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.delay)
  return delay_;
}
inline void aximm_packet::set_delay(float value) {
  _has_bits_[0] |= 0x00000800u;
  delay_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.delay)
}

// optional uint32 qos = 16;
inline bool aximm_packet::has_qos() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void aximm_packet::clear_qos() {
  qos_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::X_GOOGLE_NAMESPACE::protobuf::uint32 aximm_packet::qos() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.qos)
  return qos_;
}
inline void aximm_packet::set_qos(::X_GOOGLE_NAMESPACE::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  qos_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.qos)
}

// optional uint32 region = 17;
inline bool aximm_packet::has_region() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void aximm_packet::clear_region() {
  region_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::X_GOOGLE_NAMESPACE::protobuf::uint32 aximm_packet::region() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.aximm_packet.region)
  return region_;
}
inline void aximm_packet::set_region(::X_GOOGLE_NAMESPACE::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  region_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.aximm_packet.region)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xtlm_ipc

namespace X_GOOGLE_NAMESPACE {
namespace protobuf {

template <> struct is_proto_enum< ::xtlm_ipc::aximm_packet_burst_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xtlm_ipc::aximm_packet_burst_type>() {
  return ::xtlm_ipc::aximm_packet_burst_type_descriptor();
}
template <> struct is_proto_enum< ::xtlm_ipc::aximm_packet_command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xtlm_ipc::aximm_packet_command>() {
  return ::xtlm_ipc::aximm_packet_command_descriptor();
}

}  // namespace protobuf
}  // namespace X_GOOGLE_NAMESPACE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_proto_2fxtlm_5fipc_5faximm_2eproto
