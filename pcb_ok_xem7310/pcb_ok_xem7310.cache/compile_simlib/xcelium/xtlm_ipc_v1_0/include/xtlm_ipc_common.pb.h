// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/xtlm_ipc_common.proto

#ifndef PROTOBUF_INCLUDED_proto_2fxtlm_5fipc_5fcommon_2eproto
#define PROTOBUF_INCLUDED_proto_2fxtlm_5fipc_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fxtlm_5fipc_5fcommon_2eproto


#ifdef CADENCE
#define X_GOOGLE_NAMESPACE google37
#else
#define X_GOOGLE_NAMESPACE google
#endif

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fxtlm_5fipc_5fcommon_2eproto {
  static const ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::X_GOOGLE_NAMESPACE::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::X_GOOGLE_NAMESPACE::protobuf::internal::FieldMetadata field_metadata[];
  static const ::X_GOOGLE_NAMESPACE::protobuf::internal::SerializationTable serialization_table[];
  static const ::X_GOOGLE_NAMESPACE::protobuf::uint32 offsets[];
};
void AddDescriptors_proto_2fxtlm_5fipc_5fcommon_2eproto();
namespace xtlm_ipc {
class control_register;
class control_registerDefaultTypeInternal;
extern control_registerDefaultTypeInternal _control_register_default_instance_;
class header;
class headerDefaultTypeInternal;
extern headerDefaultTypeInternal _header_default_instance_;
class txn_time_info;
class txn_time_infoDefaultTypeInternal;
extern txn_time_infoDefaultTypeInternal _txn_time_info_default_instance_;
}  // namespace xtlm_ipc
namespace X_GOOGLE_NAMESPACE {
namespace protobuf {
template<> ::xtlm_ipc::control_register* Arena::CreateMaybeMessage<::xtlm_ipc::control_register>(Arena*);
template<> ::xtlm_ipc::header* Arena::CreateMaybeMessage<::xtlm_ipc::header>(Arena*);
template<> ::xtlm_ipc::txn_time_info* Arena::CreateMaybeMessage<::xtlm_ipc::txn_time_info>(Arena*);
}  // namespace protobuf
}  // namespace X_GOOGLE_NAMESPACE
namespace xtlm_ipc {

enum header_message_type {
  header_message_type_AXI_TXN = 0,
  header_message_type_CONTROL_PACKET = 1
};
bool header_message_type_IsValid(int value);
const header_message_type header_message_type_message_type_MIN = header_message_type_AXI_TXN;
const header_message_type header_message_type_message_type_MAX = header_message_type_CONTROL_PACKET;
const int header_message_type_message_type_ARRAYSIZE = header_message_type_message_type_MAX + 1;

const ::X_GOOGLE_NAMESPACE::protobuf::EnumDescriptor* header_message_type_descriptor();
inline const ::std::string& header_message_type_Name(header_message_type value) {
  return ::X_GOOGLE_NAMESPACE::protobuf::internal::NameOfEnum(
    header_message_type_descriptor(), value);
}
inline bool header_message_type_Parse(
    const ::std::string& name, header_message_type* value) {
  return ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseNamedEnum<header_message_type>(
    header_message_type_descriptor(), name, value);
}
enum control_register_command_type {
  control_register_command_type_READ = 0,
  control_register_command_type_WRITE = 1
};
bool control_register_command_type_IsValid(int value);
const control_register_command_type control_register_command_type_command_type_MIN = control_register_command_type_READ;
const control_register_command_type control_register_command_type_command_type_MAX = control_register_command_type_WRITE;
const int control_register_command_type_command_type_ARRAYSIZE = control_register_command_type_command_type_MAX + 1;

const ::X_GOOGLE_NAMESPACE::protobuf::EnumDescriptor* control_register_command_type_descriptor();
inline const ::std::string& control_register_command_type_Name(control_register_command_type value) {
  return ::X_GOOGLE_NAMESPACE::protobuf::internal::NameOfEnum(
    control_register_command_type_descriptor(), value);
}
inline bool control_register_command_type_Parse(
    const ::std::string& name, control_register_command_type* value) {
  return ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseNamedEnum<control_register_command_type>(
    control_register_command_type_descriptor(), name, value);
}
// ===================================================================

class header :
    public ::X_GOOGLE_NAMESPACE::protobuf::Message /* @@protoc_insertion_point(class_definition:xtlm_ipc.header) */ {
 public:
  header();
  virtual ~header();

  header(const header& from);

  inline header& operator=(const header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  header(header&& from) noexcept
    : header() {
    *this = ::std::move(from);
  }

  inline header& operator=(header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::X_GOOGLE_NAMESPACE::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::X_GOOGLE_NAMESPACE::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::X_GOOGLE_NAMESPACE::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const header* internal_default_instance() {
    return reinterpret_cast<const header*>(
               &_header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(header* other);
  friend void swap(header& a, header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline header* New() const final {
    return CreateMaybeMessage<header>(nullptr);
  }

  header* New(::X_GOOGLE_NAMESPACE::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<header>(arena);
  }
  void CopyFrom(const ::X_GOOGLE_NAMESPACE::protobuf::Message& from) final;
  void MergeFrom(const ::X_GOOGLE_NAMESPACE::protobuf::Message& from) final;
  void CopyFrom(const header& from);
  void MergeFrom(const header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseContext* ctx);
  ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::X_GOOGLE_NAMESPACE::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::X_GOOGLE_NAMESPACE::protobuf::io::CodedOutputStream* output) const final;
  ::X_GOOGLE_NAMESPACE::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::X_GOOGLE_NAMESPACE::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(header* other);
  private:
  inline ::X_GOOGLE_NAMESPACE::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::X_GOOGLE_NAMESPACE::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef header_message_type message_type;
  static const message_type AXI_TXN =
    header_message_type_AXI_TXN;
  static const message_type CONTROL_PACKET =
    header_message_type_CONTROL_PACKET;
  static inline bool message_type_IsValid(int value) {
    return header_message_type_IsValid(value);
  }
  static const message_type message_type_MIN =
    header_message_type_message_type_MIN;
  static const message_type message_type_MAX =
    header_message_type_message_type_MAX;
  static const int message_type_ARRAYSIZE =
    header_message_type_message_type_ARRAYSIZE;
  static inline const ::X_GOOGLE_NAMESPACE::protobuf::EnumDescriptor*
  message_type_descriptor() {
    return header_message_type_descriptor();
  }
  static inline const ::std::string& message_type_Name(message_type value) {
    return header_message_type_Name(value);
  }
  static inline bool message_type_Parse(const ::std::string& name,
      message_type* value) {
    return header_message_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .xtlm_ipc.header.message_type msg_type = 1 [default = AXI_TXN];
  bool has_msg_type() const;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  ::xtlm_ipc::header_message_type msg_type() const;
  void set_msg_type(::xtlm_ipc::header_message_type value);

  // required fixed32 msg_length = 2 [default = 0];
  bool has_msg_length() const;
  void clear_msg_length();
  static const int kMsgLengthFieldNumber = 2;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 msg_length() const;
  void set_msg_length(::X_GOOGLE_NAMESPACE::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xtlm_ipc.header)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::X_GOOGLE_NAMESPACE::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::X_GOOGLE_NAMESPACE::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::X_GOOGLE_NAMESPACE::protobuf::internal::CachedSize _cached_size_;
  int msg_type_;
  ::X_GOOGLE_NAMESPACE::protobuf::uint32 msg_length_;
  friend struct ::TableStruct_proto_2fxtlm_5fipc_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class control_register :
    public ::X_GOOGLE_NAMESPACE::protobuf::Message /* @@protoc_insertion_point(class_definition:xtlm_ipc.control_register) */ {
 public:
  control_register();
  virtual ~control_register();

  control_register(const control_register& from);

  inline control_register& operator=(const control_register& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  control_register(control_register&& from) noexcept
    : control_register() {
    *this = ::std::move(from);
  }

  inline control_register& operator=(control_register&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::X_GOOGLE_NAMESPACE::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::X_GOOGLE_NAMESPACE::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::X_GOOGLE_NAMESPACE::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const control_register& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const control_register* internal_default_instance() {
    return reinterpret_cast<const control_register*>(
               &_control_register_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(control_register* other);
  friend void swap(control_register& a, control_register& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline control_register* New() const final {
    return CreateMaybeMessage<control_register>(nullptr);
  }

  control_register* New(::X_GOOGLE_NAMESPACE::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<control_register>(arena);
  }
  void CopyFrom(const ::X_GOOGLE_NAMESPACE::protobuf::Message& from) final;
  void MergeFrom(const ::X_GOOGLE_NAMESPACE::protobuf::Message& from) final;
  void CopyFrom(const control_register& from);
  void MergeFrom(const control_register& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseContext* ctx);
  ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::X_GOOGLE_NAMESPACE::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::X_GOOGLE_NAMESPACE::protobuf::io::CodedOutputStream* output) const final;
  ::X_GOOGLE_NAMESPACE::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::X_GOOGLE_NAMESPACE::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(control_register* other);
  private:
  inline ::X_GOOGLE_NAMESPACE::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::X_GOOGLE_NAMESPACE::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef control_register_command_type command_type;
  static const command_type READ =
    control_register_command_type_READ;
  static const command_type WRITE =
    control_register_command_type_WRITE;
  static inline bool command_type_IsValid(int value) {
    return control_register_command_type_IsValid(value);
  }
  static const command_type command_type_MIN =
    control_register_command_type_command_type_MIN;
  static const command_type command_type_MAX =
    control_register_command_type_command_type_MAX;
  static const int command_type_ARRAYSIZE =
    control_register_command_type_command_type_ARRAYSIZE;
  static inline const ::X_GOOGLE_NAMESPACE::protobuf::EnumDescriptor*
  command_type_descriptor() {
    return control_register_command_type_descriptor();
  }
  static inline const ::std::string& command_type_Name(command_type value) {
    return control_register_command_type_Name(value);
  }
  static inline bool command_type_Parse(const ::std::string& name,
      command_type* value) {
    return control_register_command_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .xtlm_ipc.control_register.command_type rd_wr_cmd = 1 [default = READ];
  bool has_rd_wr_cmd() const;
  void clear_rd_wr_cmd();
  static const int kRdWrCmdFieldNumber = 1;
  ::xtlm_ipc::control_register_command_type rd_wr_cmd() const;
  void set_rd_wr_cmd(::xtlm_ipc::control_register_command_type value);

  // required int32 address = 2 [default = 0];
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  ::X_GOOGLE_NAMESPACE::protobuf::int32 address() const;
  void set_address(::X_GOOGLE_NAMESPACE::protobuf::int32 value);

  // optional fixed64 cntrl_reg = 3;
  bool has_cntrl_reg() const;
  void clear_cntrl_reg();
  static const int kCntrlRegFieldNumber = 3;
  ::X_GOOGLE_NAMESPACE::protobuf::uint64 cntrl_reg() const;
  void set_cntrl_reg(::X_GOOGLE_NAMESPACE::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:xtlm_ipc.control_register)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::X_GOOGLE_NAMESPACE::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::X_GOOGLE_NAMESPACE::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::X_GOOGLE_NAMESPACE::protobuf::internal::CachedSize _cached_size_;
  int rd_wr_cmd_;
  ::X_GOOGLE_NAMESPACE::protobuf::int32 address_;
  ::X_GOOGLE_NAMESPACE::protobuf::uint64 cntrl_reg_;
  friend struct ::TableStruct_proto_2fxtlm_5fipc_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class txn_time_info :
    public ::X_GOOGLE_NAMESPACE::protobuf::Message /* @@protoc_insertion_point(class_definition:xtlm_ipc.txn_time_info) */ {
 public:
  txn_time_info();
  virtual ~txn_time_info();

  txn_time_info(const txn_time_info& from);

  inline txn_time_info& operator=(const txn_time_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  txn_time_info(txn_time_info&& from) noexcept
    : txn_time_info() {
    *this = ::std::move(from);
  }

  inline txn_time_info& operator=(txn_time_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::X_GOOGLE_NAMESPACE::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::X_GOOGLE_NAMESPACE::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::X_GOOGLE_NAMESPACE::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const txn_time_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const txn_time_info* internal_default_instance() {
    return reinterpret_cast<const txn_time_info*>(
               &_txn_time_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(txn_time_info* other);
  friend void swap(txn_time_info& a, txn_time_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline txn_time_info* New() const final {
    return CreateMaybeMessage<txn_time_info>(nullptr);
  }

  txn_time_info* New(::X_GOOGLE_NAMESPACE::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<txn_time_info>(arena);
  }
  void CopyFrom(const ::X_GOOGLE_NAMESPACE::protobuf::Message& from) final;
  void MergeFrom(const ::X_GOOGLE_NAMESPACE::protobuf::Message& from) final;
  void CopyFrom(const txn_time_info& from);
  void MergeFrom(const txn_time_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseContext* ctx);
  ::X_GOOGLE_NAMESPACE::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::X_GOOGLE_NAMESPACE::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::X_GOOGLE_NAMESPACE::protobuf::io::CodedOutputStream* output) const final;
  ::X_GOOGLE_NAMESPACE::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::X_GOOGLE_NAMESPACE::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(txn_time_info* other);
  private:
  inline ::X_GOOGLE_NAMESPACE::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::X_GOOGLE_NAMESPACE::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double start_of_txn = 1;
  bool has_start_of_txn() const;
  void clear_start_of_txn();
  static const int kStartOfTxnFieldNumber = 1;
  double start_of_txn() const;
  void set_start_of_txn(double value);

  // optional double end_of_txn = 2;
  bool has_end_of_txn() const;
  void clear_end_of_txn();
  static const int kEndOfTxnFieldNumber = 2;
  double end_of_txn() const;
  void set_end_of_txn(double value);

  // @@protoc_insertion_point(class_scope:xtlm_ipc.txn_time_info)
 private:
  class HasBitSetters;

  ::X_GOOGLE_NAMESPACE::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::X_GOOGLE_NAMESPACE::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::X_GOOGLE_NAMESPACE::protobuf::internal::CachedSize _cached_size_;
  double start_of_txn_;
  double end_of_txn_;
  friend struct ::TableStruct_proto_2fxtlm_5fipc_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// header

// required .xtlm_ipc.header.message_type msg_type = 1 [default = AXI_TXN];
inline bool header::has_msg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void header::clear_msg_type() {
  msg_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::xtlm_ipc::header_message_type header::msg_type() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.header.msg_type)
  return static_cast< ::xtlm_ipc::header_message_type >(msg_type_);
}
inline void header::set_msg_type(::xtlm_ipc::header_message_type value) {
  assert(::xtlm_ipc::header_message_type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.header.msg_type)
}

// required fixed32 msg_length = 2 [default = 0];
inline bool header::has_msg_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void header::clear_msg_length() {
  msg_length_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::X_GOOGLE_NAMESPACE::protobuf::uint32 header::msg_length() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.header.msg_length)
  return msg_length_;
}
inline void header::set_msg_length(::X_GOOGLE_NAMESPACE::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  msg_length_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.header.msg_length)
}

// -------------------------------------------------------------------

// control_register

// required .xtlm_ipc.control_register.command_type rd_wr_cmd = 1 [default = READ];
inline bool control_register::has_rd_wr_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void control_register::clear_rd_wr_cmd() {
  rd_wr_cmd_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::xtlm_ipc::control_register_command_type control_register::rd_wr_cmd() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.control_register.rd_wr_cmd)
  return static_cast< ::xtlm_ipc::control_register_command_type >(rd_wr_cmd_);
}
inline void control_register::set_rd_wr_cmd(::xtlm_ipc::control_register_command_type value) {
  assert(::xtlm_ipc::control_register_command_type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  rd_wr_cmd_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.control_register.rd_wr_cmd)
}

// required int32 address = 2 [default = 0];
inline bool control_register::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void control_register::clear_address() {
  address_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::X_GOOGLE_NAMESPACE::protobuf::int32 control_register::address() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.control_register.address)
  return address_;
}
inline void control_register::set_address(::X_GOOGLE_NAMESPACE::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  address_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.control_register.address)
}

// optional fixed64 cntrl_reg = 3;
inline bool control_register::has_cntrl_reg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void control_register::clear_cntrl_reg() {
  cntrl_reg_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::X_GOOGLE_NAMESPACE::protobuf::uint64 control_register::cntrl_reg() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.control_register.cntrl_reg)
  return cntrl_reg_;
}
inline void control_register::set_cntrl_reg(::X_GOOGLE_NAMESPACE::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  cntrl_reg_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.control_register.cntrl_reg)
}

// -------------------------------------------------------------------

// txn_time_info

// optional double start_of_txn = 1;
inline bool txn_time_info::has_start_of_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void txn_time_info::clear_start_of_txn() {
  start_of_txn_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double txn_time_info::start_of_txn() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.txn_time_info.start_of_txn)
  return start_of_txn_;
}
inline void txn_time_info::set_start_of_txn(double value) {
  _has_bits_[0] |= 0x00000001u;
  start_of_txn_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.txn_time_info.start_of_txn)
}

// optional double end_of_txn = 2;
inline bool txn_time_info::has_end_of_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void txn_time_info::clear_end_of_txn() {
  end_of_txn_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double txn_time_info::end_of_txn() const {
  // @@protoc_insertion_point(field_get:xtlm_ipc.txn_time_info.end_of_txn)
  return end_of_txn_;
}
inline void txn_time_info::set_end_of_txn(double value) {
  _has_bits_[0] |= 0x00000002u;
  end_of_txn_ = value;
  // @@protoc_insertion_point(field_set:xtlm_ipc.txn_time_info.end_of_txn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xtlm_ipc

namespace X_GOOGLE_NAMESPACE {
namespace protobuf {

template <> struct is_proto_enum< ::xtlm_ipc::header_message_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xtlm_ipc::header_message_type>() {
  return ::xtlm_ipc::header_message_type_descriptor();
}
template <> struct is_proto_enum< ::xtlm_ipc::control_register_command_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xtlm_ipc::control_register_command_type>() {
  return ::xtlm_ipc::control_register_command_type_descriptor();
}

}  // namespace protobuf
}  // namespace X_GOOGLE_NAMESPACE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_proto_2fxtlm_5fipc_5fcommon_2eproto
